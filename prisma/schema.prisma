generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model configuration {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  config_status   String       @db.VarChar(255)
  config_score    Int
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model data_privacy {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  privacy_status  String       @db.VarChar(255)
  privacy_score   Int
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model landscape {
  id               String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String       @db.Uuid
  organization_id  String       @db.Uuid
  landscape_status String       @db.VarChar(255)
  landscape_score  Int
  created_at       DateTime     @default(now()) @db.Timestamp(6)
  updated_at       DateTime     @default(now()) @db.Timestamp(6)
  organization     organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  configuration configuration[]
  data_privacy  data_privacy[]
  landscape     landscape[]
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  security      security[]
}

model security {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String       @db.Uuid
  organization_id String       @db.Uuid
  security_status String       @db.VarChar(255)
  security_score  Int
  created_at      DateTime     @default(now()) @db.Timestamp(6)
  updated_at      DateTime     @default(now()) @db.Timestamp(6)
  organization    organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String          @unique @db.VarChar(255)
  firstName     String?         @db.VarChar(255)
  lastName      String?         @db.VarChar(255)
  roq_user_id   String          @db.VarChar(255)
  tenant_id     String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  configuration configuration[]
  data_privacy  data_privacy[]
  landscape     landscape[]
  organization  organization[]
  security      security[]
}
